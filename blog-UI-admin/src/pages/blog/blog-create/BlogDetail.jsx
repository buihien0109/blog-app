import { DeleteOutlined, LeftOutlined, SaveOutlined } from "@ant-design/icons";
import {
    Button,
    Col,
    Flex,
    Form,
    Input,
    Modal,
    Row,
    Select,
    Space,
    Upload,
    theme,
} from "antd";
import "easymde/dist/easymde.min.css";
import React, { useState } from "react";
import { Link as RouterLink } from "react-router-dom";
import SimpleMDE from "react-simplemde-editor";
import AppBreadCrumb from "../../../components/layout/AppBreadCrumb";

const blog = {
    id: 36870,
    title: "L√†m ·ª©ng d·ª•ng Music Player b·∫±ng Javascript",
    content:
        'Ch√†o c√°c b·∫°n, trong b√†i vi·∫øt n√†y ch√∫ng ta s·∫Ω c√πng nhau l√†m ·ª©ng d·ª•ng nghe nh·∫°c " `Music Player`" b·∫±ng javascript. Ch·∫Øc trong s·ªë ch√∫ng ta ai c≈©ng th√≠ch nghe nh·∫°c ph·∫£i kh√¥ng n√†o, thay v√¨ h·∫±ng ng√†y ch√∫ng ta nghe nh·∫°c qua youtube, qua zing mp3, v·∫≠y t·∫°i sao ch√∫ng ta kh√¥ng t·ª± t·∫°o ra m·ªôt ·ª©ng d·ª•ng nghe nh·∫°c c∆° b·∫£n b·∫±ng ch√≠nh kh·∫£ nƒÉng c·ªßa ch√∫ng ta. C√≥ ph·∫£i s·∫Ω th√∫ v·ªã h∆°n kh√¥ng üòÅüòÅ\n\nV·ªõi ·ª©ng d·ª•ng Music Player ch√∫ng ta c√≥ th·ªÉ l√†m c√°c ch·ª©c nƒÉng ƒë∆°n gi·∫£n sau:\n\n- Play b√†i h√°t\n- Pause b√†i h√°t\n- Chuy·ªÉn b√†i qua l·∫°i\n- Tua b√†i h√°t\n- ...\n\nƒê√¢y l√† giao di·ªán ·ª©ng d·ª•ng Music Player ban ƒë·∫ßu ch√∫ng ta, m√¨nh ƒë·ªÉ link source ·ªü ƒë√¢y ƒë·ªÉ c√°c b·∫°n c√≥ th·ªÉ tham kh·∫£o : [https://github.com/buihien0109/music-player/tree/main/start](https://github.com/buihien0109/music-player/tree/main/start)\n\nNgo√†i ra c√°c b·∫°n c√≥ th·ªÉ t·∫°o giao di·ªán ·ª©ng d·ª•ng theo √Ω th√≠ch v√† phong c√°ch c·ªßa m√¨nh\n\n![demo music player app](https://media.techmaster.vn/api/static/9479/c6iesrs51cof74mrqnfg)\n\nB·∫Øt ƒë·∫ßu th√¥i n√†o üòÅüòÅüòÅ\n\n### Hi·ªÉn th·ªã th√¥ng tin b√†i h√°t\n\nM·∫∑c ƒë·ªãnh ban ƒë·∫ßu ch√∫ng ta s·∫Ω hi·ªÉn th·ªã ra 1 b√†i h√°t b·∫•t k·ª≥ v·ªõi ti√™u ƒë·ªÅ, audio v√† ·∫£nh t∆∞∆°ng ·ª©ng v·ªõi b√†i h√°t ƒë√≥\n\n```javascript\nconst audio = document.getElementById("audio");\nconst title = document.getElementById("title");\nconst cover = document.getElementById("cover");\n\n// Ti√™u ƒë·ªÅ b√†i h√°t, t∆∞∆°ng ·ª©ng v·ªõi c√°c file mp3\nconst songs = ["mot_phut", "hen_yeu", "roi_xa"];\n\n// L·∫•y index b·∫•t k·ª≥ trong m·∫£ng songs ƒë·ªÉ hi·ªán th·ªã\nlet songIndex = 2;\n\n// Load 1 b√†i h√°t theo index\nloadSong(songs[songIndex]);\n\n// C·∫≠p nh·∫≠t th√¥ng tin b√†i h√°t\nfunction loadSong(song) {\n    title.innerText = song;\n    audio.src = `music/${song}.mp3`;\n    cover.src = `images/${song}.jpg`;\n}\n```\n\nHi·ªán t·∫°i trong project, ch√∫ng ta mockup s·∫µn 3 audio t∆∞∆°ng ·ª©ng l√† c√°c gi√° tr·ªã trong m·∫£ng **songs**\n\nFunction **loadSong** gi√∫p ch√∫ng ta hi·ªÉn th·ªã th√¥ng tin b√†i h√°t\n\n### Play & Pause\n\nM·∫∑c ƒë·ªãnh ban ƒë·∫ßu th√¨ b√†i h√°t ·ªü tr·∫°ng th√°i " `pause`", ch√∫ng ta s·∫Ω th·ª±c hi·ªán click ƒë·ªÉ play audio\n\nTuy nhi√™n ch√∫ng ta c·∫ßn ph·∫£i bi·∫øt khi n√†o th√¨ play, khi n√†o th√¨ pause. ƒê·ªÉ l√†m ƒëi·ªÅu n√†y, ch√∫ng ta s·∫Ω ph·ª• thu·ªôc v√†o class " `play`" trong element " `musicContainer`"\n\nƒê·ªãnh nghƒ©a 2 function :\n\n- `playSong` ƒë·ªÉ ph√°t nh·∫°c\n- `pauseSong` ƒë·ªÉ tam d·ª´ng\n\n```javascript\nconst musicContainer = document.getElementById("music-container");\nconst playBtn = document.getElementById("play");\n\n// Play song\nfunction playSong() {\n    musicContainer.classList.add("play");\n    playBtn.querySelector("i.fas").classList.remove("fa-play");\n    playBtn.querySelector("i.fas").classList.add("fa-pause");\n\n    audio.play();\n}\n\n// Pause song\nfunction pauseSong() {\n    musicContainer.classList.remove("play");\n    playBtn.querySelector("i.fas").classList.add("fa-play");\n    playBtn.querySelector("i.fas").classList.remove("fa-pause");\n\n    audio.pause();\n}\n\n// L·∫Øng nghe s·ª± ki·ªán\nplayBtn.addEventListener("click", () => {\n    // Ki·ªÉm tra xem musicContainer c√≥ ch·ª©a class "play" hay kh√¥ng?\n    const isPlaying = musicContainer.classList.contains("play");\n\n    // N·∫øu c√≥ th√¨ th·ª±c hi·ªán pause\n    // N·∫øu kh√¥ng th√¨ th·ª±c hi·ªán play\n    if (isPlaying) {\n        pauseSong();\n    } else {\n        playSong();\n    }\n});\n```\n\n### Progress song\n\nTheo m·∫∑c ƒë·ªãnh l√† khi ch√∫ng ta b·∫Øt ƒë·∫ßu 1 b√†i h√°t m·ªõi th√¨ thanh ti·∫øn tr√¨nh (progress bar) b·∫Øt ƒë·∫ßu ch·∫°y, d·ª±a v√†o progress ch√∫ng ta c√≥ th·ªÉ bi·∫øt ƒë∆∞·ª£c ti·∫øn ƒë·ªô ph√°t b√†i h√°t. ƒê·ªÉ l√†m ƒë∆∞·ª£c ƒëi·ªÅu n√†y, ch√∫ng ta l·∫Øng nghe s·ª± ki·ªán " `timeupdate`" c·ªßa `audio` element, v√† g·ªçi h√†m x·ª≠ l√Ω t∆∞∆°ng ·ª©ng l√† `updateProgress`.\n\nS·ª± ki·ªán " `timeUpdate`" ƒë∆∞·ª£c k√≠ch ho·∫°t khi v·ªã tr√≠ ph√°t c·ªßa audio/video b·ªã thay ƒë·ªïi.\n\nNgo√†i ra, ch√∫ng ta c√≥ th·ªÉ "tua" nhanh b√†i h√°t ƒë·∫øn 1 v·ªã tr√≠ ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh tr√™n thanh progress. ·ªû ƒë√¢y ch√∫ng ta s·∫Ω l·∫Øng nghe s·ª± ki·ªán "click" tr√™n `progressContainer` element ƒë·ªÉ update `currentTime` c·ªßa audio\n\n```javascript\nconst progress = document.getElementById("progress");\nconst progressContainer = document.getElementById("progress-container");\n\n// Time/song update\naudio.addEventListener("timeupdate", updateProgress);\n\n// Click on progress bar\nprogressContainer.addEventListener("click", setProgress);\n\n// Update progress bar\nfunction updateProgress(e) {\n    const { duration, currentTime } = e.srcElement;\n    const progressPercent = (currentTime / duration) * 100;\n    progress.style.width = `${progressPercent}%`;\n}\n\n// Set progress bar\nfunction setProgress(e) {\n    const width = this.clientWidth;\n    const clickX = e.offsetX;\n    const duration = audio.duration;\n\n    audio.currentTime = (clickX / width) * duration;\n}\n```\n\n### Next song & Prev song\n\nM·ªôt t√≠nh nƒÉng r·∫•t quan tr·ªçng trong m·ªôt ·ª©ng d·ª•ng "`Music Player`" l√† next v√† prev b√†i h√°t. ƒê·ªÉ l√†m ƒë∆∞·ª£c ƒëi·ªÅu n√†y ch√∫ng ta l·∫Øng nghe s·ª± ki·ªán "click" tr√™n 2 n√∫t `nextBtn` g·ªçi h√†m x·ª≠ l√Ω `nextSong` ƒë·ªÉ th·ª±c hi·ªán next b√†i h√°t v√† n√∫t `prevBtn` g·ªçi h√†m x·ª≠ l√Ω `prevSong` ƒë·ªÉ th·ª±c hi·ªán prev b√†i h√°t\n\n```javascript\nconst prevBtn = document.getElementById("prev");\nconst nextBtn = document.getElementById("next");\n\n// L·∫Øng nghe s·ª± ki·ªán khi next v√† prev b√†i h√°t\nprevBtn.addEventListener("click", prevSong);\nnextBtn.addEventListener("click", nextSong);\n\n// L·∫Øng nghe s·ª± ki·ªán khi k·∫øt th√∫c b√†i h√°t\naudio.addEventListener("ended", nextSong);\n\n// X·ª≠ l√Ω khi prev b√†i h√°t\nfunction prevSong() {\n    // Gi·∫£m index c·ªßa songIndex ƒëi 1\n    songIndex--;\n\n    // N·∫øu ƒëang l√† b√†i h√°t ƒë·∫ßu th√¨ quay l·∫°i b√†i h√°t cu·ªëi\n    if (songIndex < 0) {\n        songIndex = songs.length - 1;\n    }\n\n    // C·∫≠p nh·∫≠t th√¥ng tin c·ªßa b√†i h√°t l√™n giao di·ªán\n    loadSong(songs[songIndex]);\n\n    // Ph√°t nh·∫°c\n    playSong();\n}\n\n// X·ª≠ l√Ω khi next b√†i h√°t\nfunction nextSong() {\n    // TƒÉng index c·ªßa songIndex l√™n 1\n    songIndex++;\n\n    // N·∫øu ƒëang l√† b√†i h√°t cu·ªëi th√¨ quay l·∫°i b√†i h√°t ƒë·∫ßu\n    if (songIndex > songs.length - 1) {\n        songIndex = 0;\n    }\n\n    // C·∫≠p nh·∫≠t th√¥ng tin c·ªßa b√†i h√°t l√™n giao di·ªán\n    loadSong(songs[songIndex]);\n\n    // Ph√°t nh·∫°c\n    playSong();\n}\n```\n\nV√† ƒë√¢y l√† k·∫øt qu·∫£ cu·ªëi c√πng c·ªßa ch√∫ng ta\n\n![k·∫øt qu·∫£](https://media.techmaster.vn/api/static/9479/c6ioqls51cof74mrqnh0)\n\nV·∫≠y l√† ch√∫ng ta ƒë√£ ho√†n th√†nh ·ª©ng d·ª•ng "Music Player" v·ªõi c√°c ch·ª©c nƒÉng c∆° b·∫£n. Hi v·ªçng c√°c b·∫°n th·∫•y b√†i vi·∫øt n√†y h·ªØu √≠ch v√† th√∫ v·ªã üòÅüòÅüòÅ\n\nPh·∫ßn sources code c·ªßa b√†i vi·∫øt n√†y, c√°c b·∫°n c√≥ th·ªÉ tham kh·∫£o t·∫°i ƒë√¢y: [https://github.com/buihien0109/music-player/tree/main/final](https://github.com/buihien0109/music-player/tree/main/final)\n\n> C√°c b·∫°n c√≥ th·ªÉ tham kh·∫£o th√™m kh√≥a h·ªçc n√†y nh√©:\n\n- Javascript cƒÉn b·∫£n - T·ªïng h·ª£p 12 game huy·ªÅn tho·∫°i - [t·∫°i ƒë√¢y](https://techmaster.vn/khoa-hoc/ev5/javascript-can-ban-tong-hop-12-game-huyen-thoai).\n- L·∫≠p tr√¨nh Game Javascript (tr·ª±c tuy·∫øn c√≥ t∆∞∆°ng t√°c) - [t·∫°i ƒë√¢y](https://codegame.techmaster.vn/).',
    description:
        "Ch√†o c√°c b·∫°n, trong b√†i vi·∫øt n√†y ch√∫ng ta s·∫Ω c√πng nhau l√†m ·ª©ng d·ª•ng nghe nh·∫°c &#34;Music Player&#34; b·∫±ng javascript\n",
    thumbnail: "https://placehold.co/200x200?text=BH",
    status: true,
    categories: [
        { label: "ReactJS", value: 1 },
        { label: "NodeJS", value: 2 },
        { label: "MongoDB", value: 3 },
    ],
};

const imageUrls = [...Array(12).keys()].map(
    (index) => `https://placehold.co/200x200?text=${index}`
);

const breadcrumb = [
    { label: "Danh s√°ch b√†i vi·∫øt", href: "/admin/blogs" },
    { label: blog.name, href: `/admin/blogs/${blog.id}/detail` },
];

const BlogDetail = () => {
    const {
        token: { colorBgContainer, borderRadiusLG },
    } = theme.useToken();
    const [form] = Form.useForm();
    const [isModalOpen, setIsModalOpen] = useState(false);
    const [imageSelected, setImageSelected] = useState(null);
    const [thumbnail, setThumbnail] = useState(blog.thumbnail);
    const [images, setImages] = useState(imageUrls);

    const handleUpdate = async () => {
        try {
            // Validate fields
            const values = await form.validateFields();
            console.log("Form data values:", values);

            // TODO: G·ª≠i d·ªØ li·ªáu l√™n server
        } catch (error) {
            // Handle validation error
            console.error("Validation failed:", error);
        }
    };

    const selecteImage = (image) => () => {
        setImageSelected(image);
    };

    const handleUploadImage = (info) => {
        const { file } = info;
        console.log("file", file);

        // Create temp url
        const tempUrl = URL.createObjectURL(file);
        setImages([tempUrl, ...images]);
    };

    const handleDelete = () => {
        console.log("Delete blog");
    };

    return (
        <>
            <AppBreadCrumb items={breadcrumb} />
            <div
                style={{
                    padding: 24,
                    minHeight: 360,
                    background: colorBgContainer,
                    borderRadius: borderRadiusLG,
                }}
            >
                <Flex justify="space-between" align="center">
                    <Space style={{ marginBottom: "1rem" }}>
                        <RouterLink to="/admin/blogs">
                            <Button type="default" icon={<LeftOutlined />}>
                                Quay l·∫°i
                            </Button>
                        </RouterLink>
                        <Button
                            style={{ backgroundColor: "rgb(60, 141, 188)" }}
                            type="primary"
                            icon={<SaveOutlined />}
                            onClick={handleUpdate}
                        >
                            C·∫≠p nh·∫≠t
                        </Button>
                    </Space>
                    <Button
                        type="primary"
                        danger
                        icon={<DeleteOutlined />}
                        onClick={handleDelete}
                    >
                        X√≥a b√†i vi·∫øt
                    </Button>
                </Flex>

                <Form
                    form={form}
                    layout="vertical"
                    autoComplete="off"
                    initialValues={{
                        ...blog,
                        categoryIds: blog.categories.map(
                            (category) => category.value
                        ),
                    }}
                >
                    <Row gutter={16}>
                        <Col span={16}>
                            <Form.Item
                                label="Ti√™u ƒë·ªÅ"
                                name="title"
                                rules={[
                                    {
                                        required: true,
                                        message: "Ti√™u ƒë·ªÅ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!",
                                    },
                                ]}
                            >
                                <Input placeholder="Enter title" />
                            </Form.Item>

                            <Form.Item
                                label="N·ªôi dung"
                                name="content"
                                rules={[
                                    {
                                        required: true,
                                        message:
                                            "N·ªôi dung kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!",
                                    },
                                ]}
                            >
                                <SimpleMDE />
                            </Form.Item>

                            <Form.Item
                                label="M√¥ t·∫£"
                                name="description"
                                rules={[
                                    {
                                        required: true,
                                        message: "M√¥ t·∫£ kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!",
                                    },
                                ]}
                            >
                                <Input.TextArea
                                    rows={4}
                                    placeholder="Enter description"
                                />
                            </Form.Item>
                        </Col>
                        <Col span={8}>
                            <Form.Item
                                label="Tr·∫°ng th√°i"
                                name="status"
                                rules={[
                                    {
                                        required: true,
                                        message:
                                            "Tr·∫°ng th√°i kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!",
                                    },
                                ]}
                            >
                                <Select
                                    style={{ width: "100%" }}
                                    options={[
                                        { label: "Nh√°p", value: false },
                                        { label: "C√¥ng khai", value: true },
                                    ]}
                                />
                            </Form.Item>

                            <Form.Item label="Danh m·ª•c" name="categoryIds">
                                <Select
                                    mode="multiple"
                                    style={{ width: "100%" }}
                                    options={[
                                        { label: "ReactJS", value: 1 },
                                        { label: "NodeJS", value: 2 },
                                        { label: "MongoDB", value: 3 },
                                        { label: "ExpressJS", value: 4 },
                                        { label: "JavaScript", value: 5 },
                                        { label: "HTML", value: 6 },
                                        { label: "CSS", value: 7 },
                                        { label: "SASS", value: 8 },
                                        { label: "LESS", value: 9 },
                                    ]}
                                />
                            </Form.Item>

                            <Form.Item name="thumbnail">
                                <Space
                                    direction="vertical"
                                    style={{ width: "100%" }}
                                >
                                    <img
                                        style={{
                                            width: "100%",
                                            height: 300,
                                            objectFit: "cover",
                                        }}
                                        src={thumbnail}
                                        alt="Avatar"
                                    />
                                    <Button
                                        type="primary"
                                        onClick={() => setIsModalOpen(true)}
                                    >
                                        Thay ƒë·ªïi ·∫£nh b√†i vi·∫øt
                                    </Button>
                                </Space>
                            </Form.Item>
                        </Col>
                    </Row>
                </Form>

                <Modal
                    title="Ch·ªçn ·∫£nh c·ªßa b·∫°n"
                    open={isModalOpen}
                    onCancel={() => {
                        setIsModalOpen(false);
                        setImageSelected(null);
                    }}
                    footer={null}
                    width={1000}
                    style={{ top: 20 }}
                >
                    <Flex justify="space-between" align="center">
                        <Space direction="horizontal">
                            <Upload
                                maxCount={1}
                                onChange={handleUploadImage}
                                showUploadList={false}
                            >
                                <Button
                                    type="primary"
                                    style={{
                                        backgroundColor: "rgb(243, 156, 18)",
                                    }}
                                >
                                    T·∫£i ·∫£nh l√™n
                                </Button>
                            </Upload>

                            <Button
                                type="primary"
                                disabled={!imageSelected}
                                onClick={() => {
                                    setThumbnail(imageSelected);
                                    setIsModalOpen(false);
                                    form.setFieldsValue({
                                        thumbnail: imageSelected,
                                    });
                                }}
                            >
                                Ch·ªçn ·∫£nh
                            </Button>
                        </Space>
                        <Button
                            type="primary"
                            disabled={!imageSelected}
                            danger
                            onClick={() => {
                                setImages(
                                    images.filter(
                                        (image) => image !== imageSelected
                                    )
                                );
                                setImageSelected(null);
                            }}
                        >
                            X√≥a ·∫£nh
                        </Button>
                    </Flex>

                    <div style={{ marginTop: "1rem" }}>
                        <Row gutter={[16, 16]} wrap={true}>
                            {images &&
                                images.map((image, index) => (
                                    <Col span={6} key={index}>
                                        <div
                                            className={
                                                imageSelected == image
                                                    ? "image-selected"
                                                    : ""
                                            }
                                            onClick={selecteImage(image)}
                                        >
                                            <img
                                                src={image}
                                                alt={`image-${index}`}
                                                style={{ width: "100%" }}
                                            />
                                        </div>
                                    </Col>
                                ))}
                        </Row>
                    </div>
                </Modal>
            </div>
        </>
    );
};

export default BlogDetail;
